#!/usr/bin/env python

NEW_YEARS = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 1, 1, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
             [1, 1, 1, 1, 1, 1, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
             [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 1, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 1, 1, 1, 0, 0, 0, 0],
             [0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
             [1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
             [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [0, 0, 0, 1, 0, 1, 0, 0, 1, 0],
             [1, 1, 1, 0, 0, 0, 1, 1, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
             [0, 1, 1, 1, 0, 0, 0, 0, 1, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
             [1, 1, 0, 1, 1, 1, 1, 1, 1, 0],
             [1, 1, 0, 1, 1, 1, 1, 1, 1, 0]]

SMILEY = [[0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
          [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
          [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
          [1, 0, 0, 1, 0, 0, 1, 0, 1, 0],
          [1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
          [1, 0, 0, 1, 0, 0, 1, 0, 1, 0],
          [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
          [0, 1, 0, 0, 0, 0, 0, 1, 0, 0],
          [0, 0, 1, 1, 1, 1, 1, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
          [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]


def binary_to_pwm(list_16):
    if len(list_16) > 16:
        raise Exception('cannot have more than 16 px')
    else:
        while len(list_16) < 16:
            list_16.append(0)
    bitstring = ''
    for x in list_16:
        if x == 0:
            bitstring = '000000000000' + bitstring
        if x == 1:
            bitstring = '111111111111' + bitstring
    bit_array = []
    start = 0
    for end in range(32, len(bitstring) + 1, 32):
        s = rev(bitstring[start:end])
        bit_array.append(int(s, 2))
        start = end
    return bit_array


def rev(s):
    s1 = ''
    for x in reversed(s):
        s1 += x
    return s1


def one_line(l1):
    data = []
    for x in l1:
        data += binary_to_pwm([i for i in reversed(x)])
    return data


def format_data(d):
    s = 'static const unsigned int img_data[{}] = '.format(len(d)) + '{'
    for n, x in enumerate(d):
        if n % 6 == 0:
            s += '\n    '
        s += str(x)
        if n != len(d) - 1:
            s += ', '
    s += '\n    };'
    return s


def two_lines(l1, l2):
    pass

if __name__ == '__main__':
    print format_data(one_line(SMILEY + SMILEY))
